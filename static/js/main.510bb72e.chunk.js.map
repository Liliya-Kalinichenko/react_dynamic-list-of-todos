{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","helpers.tsx","index.tsx"],"names":["TodoList","todos","setSelectedTodo","selectedTodo","className","map","todo","id","title","completed","isTodoSelected","cn","type","onClick","TodoFilter","query","onQueryChange","filterParam","onFilterChange","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","TodoModal","user","isLoading","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","setTodos","setQuery","setFilterParam","setIsLoading","setUser","useEffect","finally","userId","visibleGoods","useMemo","result","filter","trim","toLowerCase","includes","getFilteredTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.510bb72e.chunk.js","sourcesContent":["import cn from 'classnames';\n\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  setSelectedTodo: (todo: Todo) => void,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedTodo,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, title, completed } = todo;\n          const isTodoSelected = selectedTodo\n            ? selectedTodo.id === id\n            : false;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({\n                'has-background-info-light': isTodoSelected,\n              })}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setSelectedTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn({\n                      'far fa-eye': !isTodoSelected,\n                      'far fa-eye-slash': isTodoSelected,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","type Props = {\n  query: string,\n  onQueryChange: (newQuery: string) => void,\n  filterParam: string,\n  onFilterChange: (newFilterParam: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQueryChange,\n  filterParam,\n  onFilterChange,\n}) => {\n  const handleSubmitChange = (event: React.FormEvent) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form className=\"field has-addons\" onSubmit={handleSubmitChange}>\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterParam}\n            onChange={event => onFilterChange(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  user: User | null,\n  selectedTodo: Todo,\n  setSelectedTodo: ((todo: Todo | null) => void)\n  isLoading: boolean,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  user,\n  selectedTodo,\n  setSelectedTodo,\n  isLoading,\n}) => {\n  const { id, title, completed } = selectedTodo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      {!isLoading && user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos, getUser } from './api';\nimport { User } from './types/User';\nimport { getFilteredTodos } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState<string>('');\n  const [filterParam, setFilterParam] = useState('all');\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      setIsLoading(true);\n      getUser(selectedTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedTodo]);\n\n  const visibleGoods = useMemo(() => {\n    return getFilteredTodos(todos, filterParam, query);\n  }, [query, filterParam, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={setQuery}\n                filterParam={filterParam}\n                onFilterChange={setFilterParam}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && !selectedTodo && <Loader />}\n              {!!todos.length && (\n                <TodoList\n                  todos={visibleGoods}\n                  setSelectedTodo={setSelectedTodo}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          user={user}\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n          isLoading={isLoading}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\n\nexport function getFilteredTodos(\n  todos: Todo[],\n  filterParam: string,\n  query: string,\n) {\n  let result = [];\n\n  switch (filterParam) {\n    case 'active':\n      result = todos.filter(todo => !todo.completed);\n      break;\n\n    case 'completed':\n      result = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      result = todos;\n      break;\n  }\n\n  return !query.trim()\n    ? result\n    : result.filter(\n      todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n    );\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}